package org.mule.transport.legstar.test.multistruct;
import com.legstar.coxb.transform.HostTransformException;
import org.mule.transport.legstar.transformer.AbstractXmlToHostMuleTransformer;
import java.util.LinkedList;
import java.util.List;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.transport.legstar.test.coxb.Record1Transformers;
import org.mule.transport.legstar.test.coxb.Record2Transformers;

/**
 * XML to Host Byte Array Mule Transformer for MultistructRequestHolder type.
 * <p/>
 * <code>MultistructRequestHolderXmlToHostMuleTransformer</code> takes an XML as input
 * and turns it into a byte array in host format (EBCDIC), ready
 * to be sent to a target Mainframe.
 * <p/> 
 * Class generated by LegStar Mule Component generator.
 */
public class MultistructRequestHolderXmlToHostMuleTransformer extends AbstractXmlToHostMuleTransformer {

    /**
     * Host data is composed of multiple structures, each with its own binding
     * transformers.
     */
    private static final List<AbstractTransformers> TRANSFORMERS_LIST = new LinkedList<AbstractTransformers>();
    static {
      TRANSFORMERS_LIST.add(new Record1Transformers());
      TRANSFORMERS_LIST.add(new Record2Transformers());
    }
    /**
     * Constructs the transformer.
     * @throws HostTransformException if transformer cannot be created
     */
    public MultistructRequestHolderXmlToHostMuleTransformer() throws HostTransformException {
        super(TRANSFORMERS_LIST, new HolderGetter() {
    
            public Object get(Object holder, int index) {
                switch (index) {
                case 0:
                  return ((MultistructRequestHolder) holder).getRecord1();
                case 1:
                  return ((MultistructRequestHolder) holder).getRecord2();
                default:
                  throw new IllegalArgumentException(
                      "No inner object in holder class for index "
                          + index);
                }
            }

            public Class<?> getHolderType() {
                return MultistructRequestHolder.class;
            }
    
        });
    }
}
