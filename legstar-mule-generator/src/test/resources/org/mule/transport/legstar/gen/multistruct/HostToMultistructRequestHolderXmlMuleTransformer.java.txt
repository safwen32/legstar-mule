package org.mule.transport.legstar.test.multistruct;
import com.legstar.coxb.transform.HostTransformException;
import org.mule.transport.legstar.transformer.AbstractHostToXmlMuleTransformer;
import java.util.LinkedList;
import java.util.List;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.transport.legstar.test.jaxb.Record1;
import org.mule.transport.legstar.test.jaxb.Record2;
import org.mule.transport.legstar.test.coxb.Record1Transformers;
import org.mule.transport.legstar.test.coxb.Record2Transformers;

/**
 * Host Byte Array to XML Mule Transformer for MultistructRequestHolder type.
 * <p/>
 * <code>HostToMultistructRequestHolderXmlMuleTransformer</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * an XML bound to the MultistructRequestHolder object.
 * <p/>
 * Class generated by LegStar Mule Component generator.
 */
public class HostToMultistructRequestHolderXmlMuleTransformer extends AbstractHostToXmlMuleTransformer {

    /**
     * Host data is composed of multiple structures, each with its own binding
     * transformers.
     */
    private static final List<AbstractTransformers> TRANSFORMERS_LIST = new LinkedList<AbstractTransformers>();
    static {
      TRANSFORMERS_LIST.add(new Record1Transformers());
      TRANSFORMERS_LIST.add(new Record2Transformers());
    }
    /**
     * Constructs the transformer. Source is a byte array and result will be
     * an XML.
     * @throws HostTransformException if transformer cannot be created
     */
    public HostToMultistructRequestHolderXmlMuleTransformer() throws HostTransformException {
        super(TRANSFORMERS_LIST, new HolderSetter() {
    
            MultistructRequestHolder holder = new MultistructRequestHolder();
  
            public Object getHolder() {
                return holder;
            }
  
            public void set(Object object, int index) {
                switch (index) {
                case 0:
                    holder.setRecord1((Record1) object);
                    break;
                case 1:
                    holder.setRecord2((Record2) object);
                    break;
                }
            }
            public Class<?> getHolderType() {
                return MultistructRequestHolder.class;
            }
        });
    }


}
