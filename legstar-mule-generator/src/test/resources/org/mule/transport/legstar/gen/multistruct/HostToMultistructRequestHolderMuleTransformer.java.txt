package org.mule.transport.legstar.test.multistruct;
import org.mule.transformer.types.DataTypeFactory;
import org.mule.transport.legstar.transformer.AbstractHostToJavaMuleTransformer;
import java.util.LinkedList;
import java.util.List;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.transport.legstar.test.jaxb.Record1;
import org.mule.transport.legstar.test.jaxb.Record2;
import org.mule.transport.legstar.test.coxb.Record1Transformers;
import org.mule.transport.legstar.test.coxb.Record2Transformers;

/**
 * Host Byte Array to MultistructRequestHolder Mule Transformer.
 * <p/>
 * <code>HostToMultistructRequestHolderMuleTransformer</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * a MultistructRequestHolder object.
 * <p/>
 * Class generated by LegStar Mule Component generator.
 */
public class HostToMultistructRequestHolderMuleTransformer extends AbstractHostToJavaMuleTransformer {

    /**
     * Host data is composed of multiple structures, each with its own binding
     * transformers.
     */
    private static final List<AbstractTransformers> TRANSFORMERS_LIST = new LinkedList<AbstractTransformers>();
    static {
      TRANSFORMERS_LIST.add(new Record1Transformers());
      TRANSFORMERS_LIST.add(new Record2Transformers());
    }
    /**
     * Constructs the transformer. Source is a byte array and result will be
     * a MultistructRequestHolder object.
     */
    public HostToMultistructRequestHolderMuleTransformer() {
        super(
            TRANSFORMERS_LIST,
            new AbstractHostToJavaMuleTransformer.MultiStructJavaSetter() {
    
              MultistructRequestHolder reply = new MultistructRequestHolder();
    
              public Object getJavaResult() {
                return reply;
              }
    
              public void set(Object object, int index) {
                switch (index) {
                case 0:
                  reply.setRecord1((Record1) object);
                  break;
                case 1:
                  reply.setRecord2((Record2) object);
                  break;
                }
              }
            });
        setReturnDataType(DataTypeFactory.create(MultistructRequestHolder.class));
    }


}
