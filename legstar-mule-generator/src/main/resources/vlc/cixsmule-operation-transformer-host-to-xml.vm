##/////////////////////////////////////////////////////////////////////
##Mule Operation Host Byte Array to XML transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#parse("vlc/cixsmule-operation-transformer-common.vm")
#set($transformerType = "HostTo${holderType}XmlMuleTransformer")
#set($holderNamespace = ${cixsOperation.responseHolderNamespace})
import com.legstar.coxb.transform.HostTransformException;
import org.mule.transport.legstar.transformer.AbstractHostToXmlMuleTransformer;
#if($cixsOperation.hasChannel())
import java.util.HashMap;
import javax.xml.namespace.QName;
import com.legstar.coxb.transform.AbstractXmlTransformers;
import org.mule.api.transformer.TransformerException;
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}XmlTransformers;
#end
#else
#if($cixsStructures.size() > 1)
import java.util.LinkedList;
import java.util.List;
import com.legstar.coxb.transform.AbstractTransformers;
#foreach($cixsStructure in $cixsStructures)
#set($javaClassName = ${cixsHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
import ${javaClassName};
#end
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}Transformers;
#end
#else
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}XmlTransformers;
#end
#end
#end

/**
 * Host Byte Array to XML Mule Transformer for $type type.
 * <p/>
 * <code>${transformerType}</code> takes a byte array in host format
 * (EBCDIC) coming from a source Mainframe as input and turns it into
 * an XML bound to the $type object.
 * <p/>
 * Class generated by ${generatorName}.
 */
public class ${transformerType} extends AbstractHostToXmlMuleTransformer {

#if(!$cixsOperation.hasChannel() && $cixsStructures.size() > 1)
    /**
     * Host data is composed of multiple structures, each with its own binding
     * transformers.
     */
    private static final List<AbstractTransformers> TRANSFORMERS_LIST = new LinkedList<AbstractTransformers>();
    static {
#foreach($cixsStructure in $cixsStructures)
      TRANSFORMERS_LIST.add(new ${cixsStructure.jaxbType}Transformers());
#end
    }
#end
    /**
     * Constructs the transformer. Source is a byte array and result will be
     * an XML.
     * @throws HostTransformException if transformer cannot be created
     */
    public ${transformerType}() throws HostTransformException {
#if($cixsOperation.hasChannel())
        super(new HashMap < String, AbstractXmlTransformers >());
#foreach($cixsStructure in $cixsStructures)
        getXmlBindingTransformersMap().put("${cixsStructure.cicsContainer}", new ${cixsStructure.jaxbType}XmlTransformers());
#end
#else
#if($cixsStructures.size() > 1)
        super(TRANSFORMERS_LIST, new HolderSetter() {
    
            ${type} holder = new ${type}();
  
            public Object getHolder() {
                return holder;
            }
  
            public void set(Object object, int index) {
                switch (index) {
#foreach($cixsStructure in $cixsStructures)
#set($index=$velocityCount - 1 )
                case $index:
                    holder.set${cixsStructure.jaxbType}((${cixsStructure.jaxbType}) object);
                    break;
#end
                }
            }
            public Class<?> getHolderType() {
                return ${type}.class;
            }
        });
#else
        super(new ${cixsStructures.get(0).jaxbType}XmlTransformers());
#end
#end
    }

#if($cixsOperation.hasChannel())
    /** {@inheritDoc} */
    public QName getHolderQName() throws TransformerException {
        return new QName("${holderNamespace}",
                "${holderType}");
    }
#end

}
