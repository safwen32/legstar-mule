##/////////////////////////////////////////////////////////////////////
##Mule Operation Object to Host Byte Array transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#parse("vlc/cixsmule-operation-transformer-common.vm")
#set($transformerType = "${holderType}ToHostMuleTransformer")
import org.mule.transformer.types.SimpleDataType;
import org.mule.transport.legstar.transformer.AbstractJavaToHostMuleTransformer;
#if($cixsOperation.hasChannel())
import java.util.HashMap;
import com.legstar.coxb.transform.AbstractTransformers;
import org.mule.api.transformer.TransformerException;
#else
#if($cixsStructures.size() > 1)
import java.util.LinkedList;
import java.util.List;
import com.legstar.coxb.transform.AbstractTransformers;
#else
#foreach($cixsStructure in $cixsStructures)
#set($javaClassName = ${cixsHelper.getJavaClassName(${cixsStructure.jaxbPackageName}, ${cixsStructure.jaxbType})})
import ${javaClassName};
#end
#end
#end
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}Transformers;
#end

/**
 * $type to Host Byte Array Mule Transformer.
 * <p/>
 * <code>${transformerType}</code> takes a $type object as input
 * and turns it into a byte array in host format (EBCDIC), ready
 * to be sent to a target Mainframe.
 * <p/> 
 * Class generated by ${generatorName}.
 */
public class ${transformerType} extends AbstractJavaToHostMuleTransformer {

#if(!$cixsOperation.hasChannel() && $cixsStructures.size() > 1)
    /**
     * Host data is composed of multiple structures, each with its own binding
     * transformers.
     */
    private static final List<AbstractTransformers> TRANSFORMERS_LIST = new LinkedList<AbstractTransformers>();
    static {
#foreach($cixsStructure in $cixsStructures)
      TRANSFORMERS_LIST.add(new ${cixsStructure.jaxbType}Transformers());
#end
    }
#end
    /**
     * Constructs the transformer. Source is a $type object and result
     * will be a byte array.
     */
    public ${transformerType}() {
#if($cixsOperation.hasChannel())
        super(new HashMap < String, AbstractTransformers >());
#foreach($cixsStructure in $cixsStructures)
        getBindingTransformersMap().put("${cixsStructure.cicsContainer}", new ${cixsStructure.jaxbType}Transformers());
#end
#else
#if($cixsStructures.size() > 1)
        super(TRANSFORMERS_LIST, new HolderGetter() {
    
            public Object get(Object holder, int index) {
                switch (index) {
#foreach($cixsStructure in $cixsStructures)
#set($index=$velocityCount - 1 )
                case $index:
                  return ((${type}) holder).get${cixsStructure.jaxbType}();
#end
                default:
                  throw new IllegalArgumentException(
                      "No inner object in holder class for index "
                          + index);
                }
            }

            public Class<?> getHolderType() {
                return ${type}.class;
            }
    
        });
#else
        super(new ${cixsStructures.get(0).jaxbType}Transformers());
#end
#end
        registerSourceType(new SimpleDataType<Object>(${type}.class));
    }

#if($cixsOperation.hasChannel())
    /** {@inheritDoc} */
    public Object getObjectFromHolder(
            final Object holderObject,
            final String partID) throws TransformerException {
            
#foreach($cixsStructure in $cixsStructures)
        if (partID.equals("${cixsStructure.cicsContainer}")) {
            return ((${type}) holderObject).get${cixsStructure.jaxbPropertyName}();
        }
#end
        return null;
    }
#end

}
