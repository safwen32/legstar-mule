##/////////////////////////////////////////////////////////////////////
##Mule Operation XML to Host Byte Array transformer Template.
##@author Fady
##@version 0.1
##/////////////////////////////////////////////////////////////////////
#parse("vlc/cixsmule-operation-transformer-common.vm")
#set($transformerType = "${holderType}XmlToHostMuleTransformer")
import com.legstar.coxb.transform.HostTransformException;
import org.mule.transport.legstar.transformer.AbstractXmlToHostMuleTransformer;
#if($cixsOperation.hasChannel())
import java.util.HashMap;
import com.legstar.coxb.transform.AbstractXmlTransformers;
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}XmlTransformers;
#end
#else
#if($cixsStructures.size() > 1)
import java.util.LinkedList;
import java.util.List;
import com.legstar.coxb.transform.AbstractTransformers;
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}Transformers;
#end
#else
#foreach($cixsStructure in $cixsStructures)
import ${helper.getQualClassName(${cixsStructure.coxbPackageName}, ${cixsStructure.jaxbType})}XmlTransformers;
#end
#end
#end

/**
 * XML to Host Byte Array Mule Transformer for $type type.
 * <p/>
 * <code>${transformerType}</code> takes an XML as input
 * and turns it into a byte array in host format (EBCDIC), ready
 * to be sent to a target Mainframe.
 * <p/> 
 * Class generated by ${generatorName}.
 */
public class ${transformerType} extends AbstractXmlToHostMuleTransformer {

#if(!$cixsOperation.hasChannel() && $cixsStructures.size() > 1)
    /**
     * Host data is composed of multiple structures, each with its own binding
     * transformers.
     */
    private static final List<AbstractTransformers> TRANSFORMERS_LIST = new LinkedList<AbstractTransformers>();
    static {
#foreach($cixsStructure in $cixsStructures)
      TRANSFORMERS_LIST.add(new ${cixsStructure.jaxbType}Transformers());
#end
    }
#end
    /**
     * Constructs the transformer.
     * @throws HostTransformException if transformer cannot be created
     */
    public ${transformerType}() throws HostTransformException {
#if($cixsOperation.hasChannel())
        super(new HashMap < String, AbstractXmlTransformers >());
#foreach($cixsStructure in $cixsStructures)
        getXmlBindingTransformersMap().put("${cixsStructure.cicsContainer}", new ${cixsStructure.jaxbType}XmlTransformers());
#end
#else
#if($cixsStructures.size() > 1)
        super(TRANSFORMERS_LIST, new HolderGetter() {
    
            public Object get(Object holder, int index) {
                switch (index) {
#foreach($cixsStructure in $cixsStructures)
#set($index=$velocityCount - 1 )
                case $index:
                  return ((${type}) holder).get${cixsStructure.jaxbType}();
#end
                default:
                  throw new IllegalArgumentException(
                      "No inner object in holder class for index "
                          + index);
                }
            }

            public Class<?> getHolderType() {
                return ${type}.class;
            }
    
        });
#else
        super(new ${cixsStructures.get(0).jaxbType}XmlTransformers());
#end
#end
    }
}
